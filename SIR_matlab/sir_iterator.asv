% SIRiterator
%
% Gabriella Chan 28/06/23
% gabriella.chan@monash.edu
% Monash University
%
%
% This module serves as an intermediate layer to call SIR simulator
% and SIR atrophy.
%
% We iterate through all gene pairs and their gene expression and call SIR
% simulator to store an array of normal protein expression over regions 
% over time, and misfolded protein expression over regions over time.
%
% From this we derive theortical atrophy per region for each gene and
% correlate with empirical atrophy per region per gene.

function [gene_corrs] = sir_iterator(params, genes)

    n = width(genes.risk_genes) * width(genes.clear_genes);

    gene_objs = SIR_gene.empty(n, 0);
    
    if params.vis
        % figure visualisation unavailable with parfor loops
        for idx = 1:n
            gene_objs(idx) = genes.iterate(idx, params);
        end
    else
        % parpool('Threads');
        parfor idx = 1:n
            gene_objs(idx) = genes.iterate(genes, idx, params);
        end
    end
    
    gene_corrs = assemble_gene_corrs(gene_objs);
    % assemble table from gene pairs, preallocating for speed
    assert (~isempty(gene_corrs));
end

function [gene_corrs] = assemble_gene_corrs(gene_objs)
    % collate correlation from each gene object into a single cell array
    gene_corr_cells = cell(length(gene_objs), 1);
    parfor i = 1:length(gene_objs)
        if isprop(gene_objs(i), 'gene_corr')
            gene_corr_cells{i} = gene_objs(i).gene_corr;
        end
    end
    % concatenate cell array into a single table
    gene_corrs = vertcat(gene_corr_cells{:});
end